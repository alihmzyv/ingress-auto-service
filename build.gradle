plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.4.0'
}

ext {
    dockerRegistry = System.getenv("MS23_DOCKER_REGISTRY") ?: 'alihmzyv'
    dockerRegistryUsername = System.getenv("MS23_DOCKER_REGISTRY_USERNAME") ?: 'alihmzyv@gmail.com'
    dockerRegistryPassword = System.getenv("MS23_DOCKER_REGISTRY_PASSWORD") ?: ')MGrsmJ=Y?s8q^2'
    modelMapperVersion = '3.2.0'
    openApiWebUiVersion = '2.0.2'
    openApiDataRestVersion = '1.6.15'
}

def hash = 'git rev-parse --short HEAD'.execute().text.trim()
version = "${projectVersion}.$hash"
group = 'com.alihmzyv'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen"
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiWebUiVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib {
    from {
        image = 'openjdk:17-jdk-slim'
    }
    to {
        image = "${dockerRegistry}/${project.name}:${project.version}"
        if (dockerRegistryUsername != null) {
            auth.setUsername(dockerRegistryUsername)
        }
        if (dockerRegistryPassword != null) {
            auth.setPassword(dockerRegistryPassword)
        }
    }
}

tasks.register('composeUp', Exec) {
    workingDir project.rootDir
    doFirst {
        def imageVersionEnvVar = 'AUTO_SERVICE_IMAGE_VERSION'
        environment(imageVersionEnvVar, project.version)
        commandLine 'docker', 'compose', 'up'
    }
}

tasks.register('composeDown', Exec) {
    workingDir project.rootDir
    doFirst {
        commandLine 'docker', 'compose', 'down'
    }
}

tasks.composeUp.dependsOn tasks.jib

tasks.named('test') {
    useJUnitPlatform()
}
